generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Patient {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  password       String
  age            Int
  gender         String
  weight         Float
  height         Float
  location       String
  bloodGroup     String
  contact        String
  appointments   Appointment[]
  medicalHistory MedicalHistory?
  doctors        Doctor[]        @relation("DoctorPatients")
}

model MedicalHistory {
  id                 Int      @id @default(autoincrement())
  patientId          String   @unique
  patient            Patient  @relation(fields: [patientId], references: [id])
  chronicDiseases    String[]
  allergies          String[]
  pastSurgeries      String[]
  currentMedications String?
  reportUrl          String[]
  reportData         String[]
  smoking            Boolean
  alcoholConsumption Boolean
  createdAt          DateTime @default(now())
}

model Hospital {
  id                        String              @id @default(cuid())
  name                      String
  type                      String
  registrationNumber        String
  phone                     String
  email                     String              @unique
  password                  String
  address                   String
  zipcode                   Int
  rating                    Int                 @default(4)
  departments               Department[]
  doctors                   Doctor[]            @relation("HospitalDoctors")
  appointments              Appointment[]
  beds                      BedCount?           @relation("HospitalToBed")
  medicineInventories       MedicineInventory[]
  nearestParteneredHospital String
}

model Doctor {
  id                String           @id @default(cuid())
  name              String
  email             String           @unique
  phone             String
  password          String
  hospitalId        String?
  hospital          Hospital?        @relation(fields: [hospitalId], references: [id], name: "HospitalDoctors")
  departmentId      Int?
  department        Department?      @relation(fields: [departmentId], references: [id])
  dateOfBirth       DateTime
  experience        Int
  availability      Boolean          @default(true)
  appointments      Appointment[]
  doctorSchedule    DoctorSchedule[]
  doctorLeaves      DoctorLeave[]
  patients          Patient[]        @relation("DoctorPatients")
  headedDepartments Department[]     @relation("DepartmentHead")
  departments       Department[]     @relation("DepartmentDoctors")
}

model DoctorSchedule {
  id        Int      @id @default(autoincrement())
  doctorId  String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  day       Int
  startTime DateTime
  endTime   DateTime
}

model DoctorLeave {
  id        Int      @id @default(autoincrement())
  doctorId  String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  leaveDate DateTime
  reason    String?
}

model Department {
  id           Int           @id @default(autoincrement())
  name         String
  hospitalId   String
  hospital     Hospital      @relation(fields: [hospitalId], references: [id])
  headDoctorId String?
  headDoctor   Doctor?       @relation("DepartmentHead", fields: [headDoctorId], references: [id])
  appointments Appointment[]
  doctors      Doctor[]      @relation("DepartmentDoctors")
  Doctor       Doctor[]
}

model Appointment {
  id           Int      @id @default(autoincrement())
  title        String
  time         DateTime
  status       Status   @default(PENDING)
  patientId    String
  hospitalId   String?
  departmentId Int?
  doctorId     String?

  // Relations
  patient    Patient     @relation(fields: [patientId], references: [id])
  hospital   Hospital?   @relation(fields: [hospitalId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  doctor     Doctor?     @relation(fields: [doctorId], references: [id])
}

model BedCount {
  id                 Int      @id @default(autoincrement())
  hospitalId         String   @unique
  hospital           Hospital @relation(fields: [hospitalId], references: [id], name: "HospitalToBed")
  totalBeds          Int
  totalAvailableBeds Int
  icu                ICU?
  general            General?
  premium            Premium?
}

model ICU {
  id           Int      @id @default(autoincrement())
  totalBed     Int      @default(50)
  availableBed Int      @default(20)
  bedCountId   Int      @unique
  bedCount     BedCount @relation(fields: [bedCountId], references: [id])
}

model General {
  id           Int      @id @default(autoincrement())
  totalBed     Int      @default(200)
  availableBed Int      @default(120)
  bedCountId   Int      @unique
  bedCount     BedCount @relation(fields: [bedCountId], references: [id])
}

model Premium {
  id           Int      @id @default(autoincrement())
  totalBed     Int      @default(80)
  availableBed Int      @default(20)
  bedCountId   Int      @unique
  bedCount     BedCount @relation(fields: [bedCountId], references: [id])
}

model MedicineInventory {
  id         Int      @id @default(autoincrement())
  name       String
  quantity   Int
  threshold  Int
  expiryDate DateTime
  hospitalId String
  hospital   Hospital @relation(fields: [hospitalId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
